import warnings
warnings.filterwarnings('ignore')
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer  
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import pickle

import nltk 
nltk.download('punkt')
nltk.download('stopwords') 
from nltk.corpus import stopwords

data = pd.read_csv("AmazonReview.csv")
data

data.info()

data.dropna(inplace=True)
data.info()

data.loc[data['Sentiment']<=3,'Sentiment']=0
print(data)
data.loc[data['Sentiment']>3,'Sentiment']=1

stp_words = stopwords.words('english')
def clean_review(review):
    clean_review = " ".join(word for word in review.split() if word not in stp_words)
    return clean_review

data['Review'] = data['Review'].apply(clean_review)
print(data.Review)

data['Sentiment'].value_counts()

trans = data['Sentiment'].value_counts()
print(trans)
trans.plot.bar()
plt.title('Sentiment')
plt.xlabel("Sentiment")
plt.show()

x = data['Sentiment'].value_counts()
y = data['Sentiment'].value_counts()

plt.pie(x,labels = y,autopct = '%1.1f%%',startangle = 90,colors = ['yellow','red'])
plt.title('Sentiment')
plt.show()

consolidated = ' '.join(word for word in data['Review'][data['Sentiment'] == 0].astype(str))
wordCloud = WordCloud(width = 1600,height = 800,max_font_size = 110)
plt.figure(figsize = (15,10))
plt.imshow(wordCloud.generate(consolidated),interpolation = 'bilinear')
plt.axis('off')
plt.show()

consolidated = ' '.join(word for word in data['Review'][data['Sentiment'] == 1].astype(str))
wordCloud = WordCloud(width = 1600,height = 800,max_font_size = 110)
plt.figure(figsize = (15,10))
plt.imshow(wordCloud.generate(consolidated),interpolation = 'bilinear')
plt.axis('off')
plt.show()

cv = TfidfVectorizer(max_features=2500)
X = cv.fit_transform(data['Review']).toarray()
print(X)

with open('cv.pkl','wb') as file:
    pickle.dump(cv, file)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(X,data['Sentiment'],test_size = 0.25)

print(x_train)
print(x_test)

print(x_train.shape)
print(x_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model = LogisticRegression()


model.fit(x_train,y_train)

pred = model.predict(x_test)

print(accuracy_score(y_test,pred))
print(pred)

import pickle
pickle.dump(model,open('model_save.pkl','wb'))

model = pickle.load(open('model_save.pkl','rb'))

def predict_sentiment(review_text):
    cleaned_review = clean_review(review_text)
    transformed_review = cv.transform([cleaned_review]).toarray()
    prediction = model.predict(transformed_review)

    if prediction[0] == 0:
        return 'Negative'
    else:
        return 'Positive'

input_review = input('Enter the review::')
result = predict_sentiment(input_review)
print(f'The sentiment of the review is {result}')

from imblearn.over_sampling import SMOTE
smote = SMOTE(sampling_strategy = 'auto',random_state = 42)
X_resampled,y_resampled = smote.fit_resample(X,data['Sentiment'])
y_resampled.value_counts()